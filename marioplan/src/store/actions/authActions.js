export const signIn = (credentials) => {
    return (dispatch, getState, {getFirebase}) => {
        const firebase = getFirebase(); //creating reference

        firebase.auth().signInWithEmailAndPassword(   //We sign in the user using the "auth()" function and "signInWithEmailAndPassword()" method. 
            credentials.email,
            credentials.password
        ).then(() => {   // ^ This is asynchronous, and returns "promise" until the task is done. It takes time to sign in so we use "then()" method to run the disptach after the task is completed.
            dispatch({ type: 'LOGIN_SUCCESS' });
        }).catch((err) => {   //catch() method will run if there is an error signing in to the firebase auth ( Ex: like if the password is wrong or user doesn't exist). It will stop the then() callback function and run the catch() callback function instead.
            dispatch({ type: 'LOGIN_ERROR', err }); 
        });

    }
}

export const signOut = () => {
    return (dispatch, getState, {getFirebase}) => {
        const firebase = getFirebase(); //creating reference

        firebase.auth().signOut().then(() => {  //Signing out if you're signed in. This is asynchronous, and returns "promise" until the task is done. It takes time to sign out so we use "then()" method to run the disptach after the task is completed.
            dispatch({ type: 'SIGNOUT_SUCCESS' });
        });
    }
}

export const signUp = (newUser) => {
    return (dispatch, getState, {getFirebase, getFirestore}) => {
        const firebase = getFirebase(); //creating reference
        const firestore = getFirestore(); //creating reference

        firebase.auth().createUserWithEmailAndPassword( //We sign up the user using the "auth()" function and "createUserWithEmailAndPassword()" method.
            newUser.email,
            newUser.password
            // This is going to go ahead and communicate with firebase and create that new user for us.
            // This is asynchronous, and returns "promise" until the task is done. It takes time to sign out so we use "then()" method to run the disptach after the task is completed.
        ).then((resp) => {  // The response data after the user is signed up, this contains information of the user we just signed up.
            // "resp.user" - the user property of the response data that was sent back.
            return firestore.collection('users').doc(resp.user.uid).set({ // "resp.user.uid" we're getting the uid that was auto-generated by firebase auth (LINE 32). The Firebase auth, and the user collection will match, because they have the same uid.
                // We can now create documents in the user collection that has reference to the Firebase Auth. (Firebase Auth & User Collection Data have the same UID)
                // Setting some properties inside the User Collection
                firstName: newUser.firstName,
                lastName: newUser.lastName,
                initials: newUser.firstName[0] + newUser.lastName[0]
            }).then(() => { // This is asynchronous, and returns "promise" until the task is done.
                // At this stage, we have created the user using Firebase Auth and
                // created a new document for that user in firestore (User Collection)

                // It takes time for the task to complete, so we use "then()" method to run the disptach after the task is completed.
                dispatch({ type: 'SIGNUP_SUCCESS' });
            }).catch((err) => { //catch() method will run if there is an error in any of the tasks above. It will stop the then() callback function and run the catch() callback function instead.
                dispatch({ type: 'SIGNUP_ERROR', err});
            })
        })
    }
}